{"content":"version 1.0\n##Copyright Broad Institute, 2018\n## \n## This WDL converts paired FASTQ to uBAM and adds read group information \n##\n## Requirements/expectations :\n## - Pair-end sequencing data in FASTQ format (one file per orientation)\n## - The following metada descriptors per sample:\n##  - readgroup\n##  - sample_name\n##  - library_name\n##  - platform_unit\n##  - run_date\n##  - platform_name\n##  - sequecing_center\n##\n## Outputs :\n## - Set of unmapped BAMs, one per read group\n## - File of a list of the generated unmapped BAMs\n##\n## Cromwell version support \n## - Successfully tested on v47\n## - Does not work on versions < v23 due to output syntax\n##\n## Runtime parameters are optimized for Broad's Google Cloud Platform implementation. \n## For program versions, see docker containers. \n##\n## LICENSING : \n## This script is released under the WDL source code license (BSD-3) (see LICENSE in \n## https://github.com/broadinstitute/wdl). Note however that the programs it calls may \n## be subject to different licenses. Users are responsible for checking that they are\n## authorized to run all programs before running this script. Please see the docker \n## page at https://hub.docker.com/r/broadinstitute/genomes-in-the-cloud/ for detailed\n## licensing information pertaining to the included programs.\n\n# WORKFLOW DEFINITION\nworkflow ConvertPairedFastQsToUnmappedBamWf {\n  input {\n    String sample_name \n    String fastq_1 \n    String fastq_2 \n    String readgroup_name \n    String library_name \n    String platform_unit \n    String run_date \n    String platform_name \n    String sequencing_center \n\n    Boolean make_fofn = false\n\n    String gatk_docker = \"broadinstitute/gatk:latest\"\n    String gatk_path = \"/gatk/gatk\"\n    \n    # Sometimes the output is larger than the input, or a task can spill to disk.\n    # In these cases we need to account for the input (1) and the output (1.5) or the input(1), the output(1), and spillage (.5).\n    Float disk_multiplier = 2.5\n  }\n\n    String ubam_list_name = sample_name\n\n  # Convert pair of FASTQs to uBAM\n  call PairedFastQsToUnmappedBAM {\n    input:\n      sample_name = sample_name,\n      fastq_1 = fastq_1,\n      fastq_2 = fastq_2,\n      readgroup_name = readgroup_name,\n      library_name = library_name,\n      platform_unit = platform_unit,\n      run_date = run_date,\n      platform_name = platform_name,\n      sequencing_center = sequencing_center,\n      gatk_path = gatk_path,\n      docker = gatk_docker,\n      disk_multiplier = disk_multiplier\n  }\n\n  #Create a file with the generated ubam\n  if (make_fofn) {  \n    call CreateFoFN {\n      input:\n        ubam = PairedFastQsToUnmappedBAM.output_unmapped_bam,\n        fofn_name = ubam_list_name + \".ubam\"\n    }\n  }\n  \n  # Outputs that will be retained when execution is complete\n  output {\n    File output_unmapped_bam = PairedFastQsToUnmappedBAM.output_unmapped_bam\n    File? unmapped_bam_list = CreateFoFN.fofn_list\n  }\n}\n\n# TASK DEFINITIONS\n\n# Convert a pair of FASTQs to uBAM\ntask PairedFastQsToUnmappedBAM {\n  input {\n    # Command parameters\n    String sample_name\n    File fastq_1\n    File fastq_2\n    String readgroup_name\n    String library_name\n    String platform_unit\n    String run_date\n    String platform_name\n    String sequencing_center\n    String gatk_path\n\n    # Runtime parameters\n    Int addtional_disk_space_gb = 10\n    Int machine_mem_gb = 7\n    Int preemptible_attempts = 3\n    String docker\n    Float disk_multiplier\n  }\n    Int command_mem_gb = machine_mem_gb - 1\n    Float fastq_size = size(fastq_1, \"GB\") + size(fastq_2, \"GB\")\n    Int disk_space_gb = ceil(fastq_size + (fastq_size * disk_multiplier ) + addtional_disk_space_gb)\n  command {\n    ~{gatk_path} --java-options \"-Xmx~{command_mem_gb}g\" \\\n    FastqToSam \\\n    --FASTQ ~{fastq_1} \\\n    --FASTQ2 ~{fastq_2} \\\n    --OUTPUT ~{readgroup_name}.unmapped.bam \\\n    --READ_GROUP_NAME ~{readgroup_name} \\\n    --SAMPLE_NAME ~{sample_name} \\\n    --LIBRARY_NAME ~{library_name} \\\n    --PLATFORM_UNIT ~{platform_unit} \\\n    --RUN_DATE ~{run_date} \\\n    --PLATFORM ~{platform_name} \\\n    --SEQUENCING_CENTER ~{sequencing_center} \n  }\n  runtime {\n    docker: docker\n    memory: machine_mem_gb + \" GB\"\n    disks: \"local-disk \" + disk_space_gb + \" HDD\"\n    preemptible: preemptible_attempts\n  }\n  output {\n    File output_unmapped_bam = \"~{readgroup_name}.unmapped.bam\"\n  }\n}\n\n# Creats a file of file names of the uBAM, which is a text file with each row having the path to the file.\n# In this case there will only be one file path in the txt file but this format is used by \n# the pre-processing for variant discvoery workflow. \ntask CreateFoFN {\n  input {\n    # Command parameters\n    String ubam\n    String fofn_name\n  }\n  command {\n    echo ~{ubam} > ~{fofn_name}.list\n  }\n  output {\n    File fofn_list = \"~{fofn_name}.list\"\n  }\n  runtime {\n    docker: \"ubuntu:latest\"\n    preemptible: 3\n  }\n}\n\n","checksum":[{"checksum":"88e2d162db0e5509f36be6717c30e1572094ecb6791fb21ecf21b9b84030f389","type":"sha256"}],"url":"https://zenodo.org/api/files/ace26ee0-85c7-4e0b-ae56-9a67e9718080/paired-fastq-to-unmapped-bam.wdl"}